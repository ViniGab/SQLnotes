SQL: 

- Porta padrão do mysql: 3306

- 165.112.111.11:3306 ip ficcticio + porta para acessar o local do BD.

- C: Create = INSERIR DADOS.
- R: Read = PEGAR DADOS
- U: Update = Atualizar = MODIFICAR DADOS EXISTENTES
- D: Delete = Excluir = REMOVER DADOS EXISTENTES

CRUD

_______________________________________________________________________________________________________________________________________________

HeidiSQL serve como client para vizualização. 

Baixamos o XAMPP para gerenciar o Mysql/apache e etc. 

Ativamos o Apache e o Mysql no XAMPP para acessar o http://localhost/phpmyadmin/index.php.

Para ter a opção de apagar os valores da tabela nós devemos ativar o A.I no "muda".
_______________________________________________________________________________________________________________________________________________

Cada coluna tem algumas informações sobre ela:

- Nome da coluna.
- Tipo da coluna.
- Tamanho da coluna.
- Se a coluna aceita NULL (Para campos onde não são obrigatórios ou não são todas pessoas que tem).
- Valor padrão.
_______________________________________________________________________________________________________________________________________________

Tipos de dados mais comuns na coluna:

- TINYINT / INT
- FLOAT
- VARCHAR / TEXT
- DATE / TIME / DATETIME / TIMESTAMP
_______________________________________________________________________________________________________________________________________________

Comandos básicos. Os nomes utilizados(produtos, preco, valores e etc) são com base em um banco utilizado no HeidiSQL).

SELECT * FROM produtos; // Seleciona tudo na tabela produtos.
SELECT nome FROM produtos; // Seleciona apenas o nome de produtos.
SELECT nome, preco FROM produtos;  // Seleciona nome e preco de produtos.
SELECT * FROM produtos WHERE id_fornecedor = 6; // Apenas os produtos onde o id_fornecedor é = 6.
SELECT * FROM usuarios WHERE nome = 'Pedro';  // Procura Pedro na tabela nome, textos devem ter aspas. 
SELECT * FROM tabela WHERE id IN (2,3,4);  // Para procurar mais de um.
SELECT * FROM tabela WHERE id = 2 OR id = 3;  // Usando o OR. 
SELECT * FROM produtos WHERE preco > 150;  // Maior que...
SELECT * FROM produtos WHERE preco != 200;  // Todos os preços diferentes de 200. 
SELECT * FROM produtos WHERE preco = 200 AND preco = 140; // Todos os preços com 200 e 140. 
SELECT * FROM produtos WHERE (preco > 140 AND preco < 1000) OR id = 3; // Utilizar () para organizar o solicitado, prioridade na operação.
SELECT * FROM usuarios WHERE nome LIKE 'bonieky%';  // Para procurar nomes que iniciam com 'bonieky'.
SELECT * FROM usuarios WHERE nome LIKE '%lacerda';  // Para procurar nomes que terminam com 'lacerda'.
SELECT * FROM usuarios WHERE nome LIKE '%lacerda%';  // Para procurar nomes em qualquer local da frase.
SELECT * FROM produtos WHERE estoque BETWEEN 5 and 10;  // Produtos entre 5 e 10.   
SELECT * FROM produtos WHERE id_fornecedor IN (1, 6);  // Produtos dentro do id_fornecedor com 1 e 6.   
SELECT * FROM produtos ORDER BY estoque ASC;  // Ordenar/mostrar produtos do mais barato ao mais caro, o DESC faz o contrário. 
SELECT * FROM produtos ORDER BY estoque ASC, minestoque Asc;  // Mesma situação acima, mas com 2. 
SELECT * FROM produtos WHERE LIMIT 4; // Apenas os 4 primeiros produtos da lista. 
SELECT * FROM produtos ORDER BY preco DESC LIMIT 4; // Apenas os 4 primeiros produtos mais caros da lista. 
SELECT * FROM produtos LIMIT 1,3; // Pular um produto da lista e após isto mostrar 3. 
SELECT COUNTER(*) FROM produtos; // A quantidade de produtos que tem.
SELECT COUNTER(*) FROM produtos WHERE id_fornecedor = 8; // A quantidade de produtos que tem.
SELECT AVG(preco) AS media FROM produtos;  // Média dos preços de produtos. 
SELECT SUM(estoque) as soma; // mostrará a soma de todo o estoque.
SELECT SUM(estoque) AS estoqueTotal, id_fornecedor FROM produtos GROUP BY id_fornecedor;  // Soma todo estoque e separa por id_fornecedor.
SELECT * FROM produtos;  // Isso é uma query, uma subquery é um comando, dentro de outro comando, exemplo abaixo.
SELECT *, (SELECT fornecedores.nome From fornecedores WHERE fornecedores.id = produtos.id_fornecedor) AS nome_fornecedor FROM produtos; 
SELECT produtos.*, FROM produtos INNER JOIN fornecedores ON fornecedores.id = produtos.id_fornecedor; // Usando JOIN ao invés do subQuery.
INSERT INTO usuarios (nome, datacadastro) VALUES ('Fulano', '2020-12-30');  // Inserindo novos valores na tabela, id não precisa pq é A.I.
UPDATE usuarios SET nome = 'Pedro da Silva' Where id = 2;  // Para alterações.
// Sempre que estiver rodando o UPDATE utilizar o WHERE para que todos não sejam alterados.
UPDATE produtos SET preco = preco * 1.1 WHERE id_fornecedor = 6;  // Mais um exemplo de update para alterações, aumentar 10% dos preços.
DELETE FROM produtos WHERE id=12 // Para deletar valores(não tem como desfazer, atenção na remoção).
_______________________________________________________________________________________________________________________________________________
